package edu.kit.compiler.parser

import edu.kit.compiler.SourceCodeWindow
import edu.kit.compiler.Token
import edu.kit.compiler.lex.AbstractLexer
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.flow.*

private val Token.isRelevantForSyntax
    get() = !(this is Token.Whitespace || this is Token.Comment)

/**
 * Asynchronous parser that consumes a lexer flow generated by [AbstractLexer.tokens] and generates an [ASTNode] from
 * it.
 *
 * @param lexer [AbstractLexer] implementation providing a flow of [edu.kit.compiler.Token]
 */
abstract class AbstractParser(private val tokens: Flow<Token>) {
    
    /**
     * The lookahead buffer that provides the token stream and preloads them, when a lookahead is required
     */
    private lateinit var lookaheadBuffer: LookaheadBuffer<Token>
    
    private lateinit var sourceCodeWindow: SourceCodeWindow
    
    protected suspend fun getCurrentSourceLine() = sourceCodeWindow.buildLine()
    
    protected suspend fun next(): Token {
        var token: Token
        do {
            token = lookaheadBuffer.get()
            sourceCodeWindow.notice(token)
        } while (!token.isRelevantForSyntax)
        return token
    }
    
    protected suspend fun peek(offset: Int = 0) = lookaheadBuffer.peekFlow()
        .filter { it.isRelevantForSyntax }
        .take(offset).last()
    
    /**
     * Parse the lexer stream into an AST. Suspends when the lexer isn't fast enough.
     */
    suspend fun parse(): ASTNode = coroutineScope {
        lookaheadBuffer = LookaheadBuffer(tokens.buffer().produceIn(this@coroutineScope))
        sourceCodeWindow = SourceCodeWindow(lookaheadBuffer)
        
        return@coroutineScope parseAST()
    }
    
    protected abstract suspend fun parseAST(): ASTNode
    
    /**
     * Expect and return a token of type [T].
     */
    protected suspend inline fun <reified T : Token> expect(): T {
        val token = next()
        
        if (token is T)
            return token
        else
            enterPanicMode()
    }
    
    // TODO: this should probably not return `Nothing`, but this way the type system just eats it at the moment
    protected fun enterPanicMode(): Nothing {
        // very black magic
        // such panic
        // much confusing
        // wow
        TODO("*explosion sounds*")
    }
    
}
